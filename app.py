"""
üè† 333HOME - Application FastAPI principale
Serveur moderne pour la gestion de parc informatique avec scanner r√©seau avanc√©
"""

from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import logging
import asyncio
import time
import json
from pathlib import Path

# Configuration
BASE_DIR = Path(__file__).parent
DATA_DIR = BASE_DIR / "data"

# Modules selon architecture RULES.md
from modules.devices import DeviceManager, DeviceMonitor
from modules.network.scan_storage import get_scan_storage
from modules.network.network_history import get_network_history

# Instance globale du gestionnaire de devices
device_manager = DeviceManager(DATA_DIR)
device_monitor = DeviceMonitor()
scan_storage = get_scan_storage(DATA_DIR)
network_history = get_network_history(DATA_DIR)

# Configuration des logs
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Configuration de l'app
app = FastAPI(
    title="333HOME",
    description="Syst√®me de domotique et gestion de parc informatique",
    version="2.0.0",
    docs_url="/api/docs",
    redoc_url="/api/redoc"
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Chemins
BASE_DIR = Path(__file__).parent
WEB_DIR = BASE_DIR / "web"
STATIC_DIR = WEB_DIR / "static"

# Scanner r√©seau selon architecture modulaire
from modules.network import NetworkScanner
network_scanner = NetworkScanner()

# ===== API ENDPOINTS DE BASE =====

@app.get("/api/status")
async def get_status():
    """Status de l'application avec format attendu par le JS"""
    import psutil
    
    return {
        "success": True,
        "data": {
            "app_name": "333HOME v2.0.0",
            "version": "2.0.0",
            "status": "running",
            "cpu_percent": psutil.cpu_percent(),
            "memory_percent": psutil.virtual_memory().percent,
            "disk_percent": psutil.disk_usage('/').percent,
            "scanner_available": True
        },
        "message": "Serveur op√©rationnel avec scanner r√©seau avanc√©"
    }

@app.get("/api/info")
async def get_info():
    """Informations d√©taill√©es du syst√®me"""
    import psutil
    import platform
    from datetime import datetime
    
    return {
        "success": True,
        "data": {
            "system": {
                "platform": platform.system(),
                "platform_release": platform.release(),
                "architecture": platform.machine(),
                "hostname": platform.node(),
                "python_version": platform.python_version()
            },
            "resources": {
                "cpu_percent": psutil.cpu_percent(),
                "memory_percent": psutil.virtual_memory().percent,
                "disk_percent": psutil.disk_usage('/').percent
            },
            "timestamp": datetime.now().isoformat(),
            "app_name": "333HOME v2.0.0",
            "app_version": "2.0.0"
        }
    }

@app.get("/api/devices")
async def get_devices():
    """Obtenir la liste des appareils configur√©s avec monitoring intelligent"""
    try:
        # Charger les appareils via le gestionnaire
        devices = device_manager.load_devices()
        
        # Monitoring intelligent: ping rapide + lookup MAC pour DHCP
        enriched_devices = await device_monitor.get_devices_with_status(devices)
        
        # Ajouter informations de monitoring
        for device in enriched_devices:
            if device.get('last_checked'):
                last_check_ago = int(time.time() - device['last_checked'])
                if last_check_ago < 60:
                    device["last_seen"] = f"Il y a {last_check_ago}s"
                elif last_check_ago < 3600:
                    device["last_seen"] = f"Il y a {last_check_ago//60}min"
                else:
                    device["last_seen"] = f"Il y a {last_check_ago//3600}h"
            else:
                device["last_seen"] = "Jamais v√©rifi√©"
        
        return {"success": True, "devices": enriched_devices}
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des appareils: {e}")
        raise HTTPException(status_code=500, detail="Erreur serveur")

@app.post("/api/devices")
async def add_device(device_data: dict):
    """Ajouter un nouvel appareil"""
    try:
        success = device_manager.add_device(device_data)
        if success:
            return {"success": True, "message": "Appareil ajout√©"}
        else:
            return {"success": False, "message": "Appareil d√©j√† existant"}
    except Exception as e:
        logger.error(f"Erreur ajout appareil: {e}")
        raise HTTPException(status_code=500, detail="Erreur serveur")

@app.put("/api/devices/{device_id}")
async def update_device(device_id: str, updates: dict):
    """Mettre √† jour un appareil"""
    try:
        success = device_manager.update_device(device_id, updates)
        if success:
            return {"success": True, "message": "Appareil mis √† jour"}
        else:
            raise HTTPException(status_code=404, detail="Appareil non trouv√©")
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erreur mise √† jour appareil: {e}")
        raise HTTPException(status_code=500, detail="Erreur serveur")

@app.delete("/api/devices/{device_id}")
async def delete_device(device_id: str):
    """Supprimer un appareil"""
    try:
        success = device_manager.remove_device(device_id)
        if success:
            return {"success": True, "message": "Appareil supprim√©"}
        else:
            raise HTTPException(status_code=404, detail="Appareil non trouv√©")
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erreur suppression appareil: {e}")
        raise HTTPException(status_code=500, detail="Erreur serveur")

@app.get("/api/monitoring/stats")
async def get_monitoring_stats():
    """Statistiques du monitoring en temps r√©el"""
    try:
        stats = device_monitor.get_monitoring_stats()
        device_stats = device_manager.get_stats()
        
        return {
            "success": True, 
            "monitoring": stats,
            "devices": device_stats
        }
    except Exception as e:
        logging.error(f"Erreur monitoring stats: {e}")
        raise HTTPException(status_code=500, detail="Erreur serveur")

@app.post("/api/monitoring/clear-cache")
async def clear_monitoring_cache():
    """Vider le cache de monitoring"""
    try:
        device_monitor.clear_cache()
        return {"success": True, "message": "Cache vid√©"}
    except Exception as e:
        logging.error(f"Erreur clear cache: {e}")
        raise HTTPException(status_code=500, detail="Erreur serveur")

# ===== ENDPOINTS SCANNER R√âSEAU =====

@app.get("/api/network/scan")
async def professional_network_scan():
    """üî• SCANNER R√âSEAU PROFESSIONNEL COMPLET"""
    try:
        logger.info("üöÄ Lancement scan professionnel")
        start_time = time.time()
        
        result = network_scanner.professional_network_scan()
        
        # Calculer la dur√©e du scan
        scan_duration = time.time() - start_time
        
        # Sauvegarder le scan (ancien syst√®me)
        if result and 'devices' in result:
            success = scan_storage.save_scan_result(result['devices'], scan_duration)
            logger.info(f"Scan sauvegard√© (legacy): {success}")
            
            # Nouveau syst√®me d'historique unifi√©
            try:
                changes = network_history.update_scan_results(result['devices'], scan_duration)
                logger.info(f"Historique unifi√© mis √† jour: {changes}")
            except Exception as history_error:
                logger.error(f"Erreur historique sp√©cifique: {history_error}")
                import traceback
                logger.error(f"Traceback historique: {traceback.format_exc()}")
        
        return {"success": True, "scan_results": result}
    except Exception as e:
        logger.error(f"Erreur scan professionnel: {e}")
        import traceback
        logger.error(f"Traceback complet: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail="Erreur serveur")

@app.get("/api/network/quick-scan")
async def quick_network_scan():
    """Scanner rapide du r√©seau local"""
    try:
        # Scan rapide de la plage r√©seau
        result = network_scanner.scan_network_range()
        return {"success": True, "devices": result}
    except Exception as e:
        logger.error(f"Erreur scan rapide: {e}")
        raise HTTPException(status_code=500, detail="Erreur serveur")

@app.get("/api/network/detailed-scan")
async def detailed_network_scan(target: str = None):
    """Scanner d√©taill√© avec ports et services"""
    try:
        if target:
            result = network_scanner.scan_host_detailed(target)
        else:
            result = network_scanner.scan_network_detailed()
        return {"success": True, "result": result}
    except Exception as e:
        logger.error(f"Erreur scan d√©taill√©: {e}")
        raise HTTPException(status_code=500, detail="Erreur serveur")

@app.get("/api/network/discovery")
async def network_discovery():
    """D√©couverte r√©seau avec identification"""
    try:
        from modules.network.device_identifier import DeviceIdentifier
        identifier = DeviceIdentifier()
        
        # Scan de base
        devices = network_scanner.scan_network_range()
        
        # Enrichissement avec identification
        enriched_devices = []
        for device in devices:
            if device.get('mac'):
                device_info = await identifier.identify_device(device['mac'])
                device.update(device_info)
            enriched_devices.append(device)
        
        return {"success": True, "devices": enriched_devices}
    except Exception as e:
        logger.error(f"Erreur discovery: {e}")
        raise HTTPException(status_code=500, detail="Erreur serveur")

# ===== ENDPOINTS HISTORIQUE SCANS =====

@app.get("/api/network/last-scan")
async def get_last_scan():
    """R√©cup√©rer le dernier scan effectu√©"""
    try:
        last_scan = scan_storage.get_last_scan()
        return {"success": True, "last_scan": last_scan}
    except Exception as e:
        logger.error(f"Erreur last scan: {e}")
        raise HTTPException(status_code=500, detail="Erreur serveur")

@app.get("/api/network/scan-history")
async def get_scan_history(limit: int = 10):
    """R√©cup√©rer l'historique des scans"""
    try:
        history = scan_storage.get_scan_history(limit)
        return {"success": True, "history": history}
    except Exception as e:
        logger.error(f"Erreur history: {e}")
        raise HTTPException(status_code=500, detail="Erreur serveur")

@app.get("/api/network/disconnected-devices")
async def get_disconnected_devices(limit: int = 20):
    """R√©cup√©rer les appareils r√©cemment d√©connect√©s"""
    try:
        disconnected = scan_storage.get_disconnected_devices(limit)
        return {"success": True, "disconnected_devices": disconnected}
    except Exception as e:
        logger.error(f"Erreur disconnected: {e}")
        raise HTTPException(status_code=500, detail="Erreur serveur")

@app.get("/api/network/scan-stats")
async def get_scan_stats():
    """R√©cup√©rer les statistiques des scans (NOUVEAU: historique unifi√©)"""
    try:
        # Nouvelles stats depuis l'historique unifi√©
        stats = network_history.get_stats()
        return {"success": True, "stats": stats}
    except Exception as e:
        logger.error(f"Erreur scan stats: {e}")
        raise HTTPException(status_code=500, detail="Erreur serveur")

# ===== NOUVEAUX ENDPOINTS HISTORIQUE UNIFI√â =====

@app.get("/api/network/devices-history")
async def get_devices_with_history():
    """R√©cup√©rer tous les appareils avec leur historique enrichi"""
    try:
        history_data = network_history.get_history()
        return {"success": True, "history": history_data}
    except Exception as e:
        logger.error(f"Erreur devices history: {e}")
        raise HTTPException(status_code=500, detail="Erreur serveur")

@app.get("/api/network/device-history/{mac}")
async def get_device_history(mac: str):
    """R√©cup√©rer l'historique d√©taill√© d'un appareil sp√©cifique via MAC"""
    try:
        device_data = network_history.get_device_by_mac(mac)
        if device_data:
            return {"success": True, "device": device_data}
        else:
            raise HTTPException(status_code=404, detail="Appareil non trouv√©")
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erreur device history: {e}")
        raise HTTPException(status_code=500, detail="Erreur serveur")

@app.get("/api/network/recent-events")
async def get_recent_network_events(limit: int = 20):
    """R√©cup√©rer les √©v√©nements r√©seau r√©cents (connexions, d√©connexions, changements)"""
    try:
        events = network_history.get_recent_events(limit)
        return {"success": True, "events": events}
    except Exception as e:
        logger.error(f"Erreur recent events: {e}")
        raise HTTPException(status_code=500, detail="Erreur serveur")

@app.get("/api/network/scan-stats-legacy")
async def get_scan_stats_legacy():
    """R√©cup√©rer les statistiques des scans (ancien syst√®me)"""
    try:
        stats = scan_storage.get_stats()
        return {"success": True, "stats": stats}
    except Exception as e:
        logger.error(f"Erreur scan stats legacy: {e}")
        raise HTTPException(status_code=500, detail="Erreur serveur")
    """R√©cup√©rer les statistiques des scans"""
    try:
        stats = scan_storage.get_stats()
        return {"success": True, "stats": stats}
    except Exception as e:
        logger.error(f"Erreur scan stats: {e}")
        raise HTTPException(status_code=500, detail="Erreur serveur")

@app.get("/api/network/stats")
async def network_stats():
    """Statistiques du scanner r√©seau"""
    try:
        stats = {
            "last_scan": network_scanner.last_scan_time,
            "total_scanned": len(network_scanner.scan_results),
            "scan_timeout": network_scanner.scan_timeout,
            "active_threads": network_scanner.max_threads
        }
        return {"success": True, "stats": stats}
    except Exception as e:
        logger.error(f"Erreur stats r√©seau: {e}")
        raise HTTPException(status_code=500, detail="Erreur serveur")

# ===== SERVEUR DE FICHIERS STATIQUES =====

# V√©rifier et cr√©er les r√©pertoires si n√©cessaire
if not WEB_DIR.exists():
    WEB_DIR.mkdir(parents=True, exist_ok=True)
if not STATIC_DIR.exists():
    STATIC_DIR.mkdir(parents=True, exist_ok=True)

# Monter les fichiers statiques
app.mount("/static", StaticFiles(directory=str(STATIC_DIR)), name="static")

@app.get("/")
async def read_root():
    """Page d'accueil"""
    index_file = WEB_DIR / "index.html"
    if index_file.exists():
        return FileResponse(str(index_file))
    else:
        raise HTTPException(status_code=404, detail="Page d'accueil non trouv√©e")

@app.get("/{filename}")
async def serve_web_files(filename: str):
    """Servir les fichiers web (templates, etc.)"""
    file_path = WEB_DIR / filename
    if file_path.exists() and file_path.is_file():
        return FileResponse(str(file_path))
    else:
        raise HTTPException(status_code=404, detail="Fichier non trouv√©")

# ===== GESTION DES ERREURS =====

from fastapi.responses import JSONResponse

@app.exception_handler(404)
async def not_found_handler(request, exc):
    return JSONResponse(
        status_code=404,
        content={
            "success": False,
            "error": "Endpoint non trouv√©",
            "detail": f"L'endpoint {request.url.path} n'existe pas"
        }
    )

@app.exception_handler(500)
async def internal_error_handler(request, exc):
    logger.error(f"Erreur interne: {exc}")
    return JSONResponse(
        status_code=500,
        content={
            "success": False,
            "error": "Erreur interne du serveur",
            "detail": str(exc)
        }
    )

# ===== √âV√âNEMENTS DE L'APPLICATION =====

@app.on_event("startup")
async def startup_event():
    """Actions au d√©marrage"""
    logger.info("üöÄ D√©marrage de 333HOME v2.0.0")
    logger.info(f"üìÅ R√©pertoire: {BASE_DIR}")
    logger.info(f"üåê Interface web: {WEB_DIR}")
    logger.info("‚úÖ Scanner r√©seau avanc√© disponible")

@app.on_event("shutdown")
async def shutdown_event():
    """Actions √† l'arr√™t"""
    logger.info("üõë Arr√™t de 333HOME")

# ===== FONCTION DE D√âMARRAGE =====

def start_server(host: str = "0.0.0.0", port: int = 8000, reload: bool = False):
    """D√©marrer le serveur FastAPI"""
    logger.info(f"üåê Serveur: http://{host}:{port}")
    logger.info("üìñ Documentation API: http://localhost:8000/api/docs")
    logger.info("üîó Interface: http://localhost:8000")
    
    uvicorn.run(
        "app:app",
        host=host,
        port=port,
        reload=reload,
        log_level="info"
    )

if __name__ == "__main__":
    start_server(reload=True)