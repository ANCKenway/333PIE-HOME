"""
üåê 333HOME - Network Registry Router
Endpoints pour le registry r√©seau (source unique de v√©rit√©)

Le registry est le fichier persistant qui stocke TOUS les devices
jamais d√©tect√©s avec leur historique complet (IP, hostname, pr√©sence).
"""

import logging
from typing import Optional, List
from fastapi import APIRouter, HTTPException, Query

from ..registry import NetworkRegistry
from ..schemas import DeviceRegistryResponse, RegistryStatistics

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/registry", tags=["network-registry"])


@router.get(
    "/",
    response_model=DeviceRegistryResponse,
    summary="Get All Registry Devices",
    description="""
    R√©cup√©rer TOUS les devices du registry avec leur historique complet.
    
    Le registry est la SOURCE UNIQUE de v√©rit√© pour les devices r√©seau.
    Chaque scan ENRICHIT ce registry au lieu de cr√©er une liste temporaire.
    
    Utiliser ce endpoint pour :
    - Dashboard temps r√©el (afficher tous les devices connus)
    - Timeline d'√©v√©nements (IP/hostname changes)
    - D√©tection DHCP changes
    - Historique de pr√©sence/absence
    """
)
async def get_all_registry_devices(
    online_only: bool = Query(False, description="Filtrer uniquement les devices online"),
    vpn_only: bool = Query(False, description="Filtrer uniquement les devices VPN"),
    managed_only: bool = Query(False, description="Filtrer uniquement les devices g√©r√©s"),
    limit: Optional[int] = Query(None, ge=1, le=500, description="Nombre max de devices")
):
    """
    R√©cup√©rer tous les devices du registry avec filtres optionnels.
    """
    try:
        registry = NetworkRegistry()
        devices = registry.get_all_devices()
        
        # Filtres
        if online_only:
            devices = [d for d in devices if d.get('is_online')]
        
        if vpn_only:
            devices = [d for d in devices if d.get('is_vpn_connected')]
        
        if managed_only:
            devices = [d for d in devices if d.get('is_managed')]
        
        # Trier par last_seen (plus r√©cents en premier)
        devices = sorted(
            devices,
            key=lambda d: d.get('last_seen', ''),
            reverse=True
        )
        
        # Limiter si demand√©
        if limit:
            devices = devices[:limit]
        
        logger.info(f"üìä Registry query: {len(devices)} devices (online_only={online_only}, vpn_only={vpn_only})")
        
        return DeviceRegistryResponse(
            total=len(devices),
            devices=devices,
            filters_applied={
                'online_only': online_only,
                'vpn_only': vpn_only,
                'managed_only': managed_only,
                'limit': limit
            }
        )
    
    except Exception as e:
        logger.error(f"‚ùå Error fetching registry devices: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erreur r√©cup√©ration registry: {str(e)}"
        )


@router.get(
    "/device/{mac}",
    summary="Get Device By MAC",
    description="R√©cup√©rer un device sp√©cifique avec son historique complet"
)
async def get_device_by_mac(mac: str):
    """
    R√©cup√©rer un device sp√©cifique du registry par son adresse MAC.
    Retourne son historique complet (IP changes, hostname changes, etc.)
    """
    try:
        registry = NetworkRegistry()
        device = registry.get_device(mac)
        
        if not device:
            raise HTTPException(
                status_code=404,
                detail=f"Device {mac} non trouv√© dans le registry"
            )
        
        return device
    
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error fetching device {mac}: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erreur r√©cup√©ration device: {str(e)}"
        )


@router.get(
    "/statistics",
    response_model=RegistryStatistics,
    summary="Get Registry Statistics",
    description="Statistiques globales du registry (total, online, DHCP dynamic, etc.)"
)
async def get_registry_statistics():
    """
    R√©cup√©rer les statistiques globales du registry.
    """
    try:
        registry = NetworkRegistry()
        stats = registry.get_statistics()
        
        logger.debug(f"üìä Registry stats: {stats['total_devices']} devices, {stats['online']} online")
        
        return RegistryStatistics(**stats)
    
    except Exception as e:
        logger.error(f"‚ùå Error fetching registry statistics: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erreur r√©cup√©ration statistics: {str(e)}"
        )


@router.get(
    "/recent-changes",
    summary="Get Recent Changes",
    description="R√©cup√©rer les devices tri√©s par activit√© r√©cente (pour timeline)"
)
async def get_recent_changes(
    limit: int = Query(50, ge=1, le=200, description="Nombre de devices √† retourner")
):
    """
    R√©cup√©rer les devices r√©cemment actifs (tri√©s par last_seen).
    Utile pour timeline d'√©v√©nements dans le dashboard.
    """
    try:
        registry = NetworkRegistry()
        recent = registry.get_recent_changes(limit=limit)
        
        logger.info(f"üìä Recent changes: {len(recent)} devices")
        
        return {
            'total': len(recent),
            'limit': limit,
            'devices': recent
        }
    
    except Exception as e:
        logger.error(f"‚ùå Error fetching recent changes: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erreur r√©cup√©ration recent changes: {str(e)}"
        )


@router.post(
    "/device/{mac}/manage",
    summary="Mark Device As Managed",
    description="Marquer un device comme g√©r√© (visible dans l'onglet Appareils)"
)
async def mark_device_as_managed(mac: str, managed: bool = True):
    """
    Marquer un device comme g√©r√© dans l'application.
    Les devices g√©r√©s apparaissent dans l'onglet "Appareils".
    """
    try:
        registry = NetworkRegistry()
        registry.mark_as_managed(mac, managed=managed)
        
        logger.info(f"‚úÖ Device {mac} marked as {'managed' if managed else 'unmanaged'}")
        
        return {
            'success': True,
            'mac': mac,
            'managed': managed
        }
    
    except Exception as e:
        logger.error(f"‚ùå Error marking device {mac}: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erreur marquage device: {str(e)}"
        )
