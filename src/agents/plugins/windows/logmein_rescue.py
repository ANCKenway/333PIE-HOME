"""
üî• Plugin LogMeIn Rescue v2 - Simple & Robust
==============================================

Automation LogMeIn Rescue SANS Selenium - Juste webbrowser + subprocess + Windows SendKeys API.

Workflow:
1. Ouvre navigateur par d√©faut avec URL + code
2. Le navigateur t√©l√©charge automatiquement l'applet
3. Attend t√©l√©chargement dans dossier Downloads
4. Lance applet avec droits admin (UAC)
5. Envoie Tab + Enter via Windows SendKeys API pour valider fen√™tre permission
   (curseur par d√©faut sur ANNULER, donc Tab ‚Üí OK, puis Enter ‚Üí valid√©)

Avantages vs Selenium:
- ‚úÖ Pas de conflit Chrome user-data-dir
- ‚úÖ Pas de d√©pendance chromedriver
- ‚úÖ Utilise le navigateur d√©j√† install√©
- ‚úÖ Automatisation compl√®te sans intervention (SendKeys fonctionne avec fen√™tres admin)
- ‚úÖ 10x plus simple et robuste
"""

from typing import Optional
from pydantic import BaseModel, Field, validator
import asyncio
import logging
import os
import time
import webbrowser
from pathlib import Path
import subprocess

from ..base import WindowsPlugin, PluginParams, PluginResult, PluginExecutionError

# Import pour envoyer touches clavier avec Windows API (fonctionne avec fen√™tres admin)
try:
    import win32com.client
    WIN32_AVAILABLE = True
except ImportError:
    WIN32_AVAILABLE = False


logger = logging.getLogger(__name__)


class LogMeInRescueParams(PluginParams):
    """Param√®tres pour LogMeIn Rescue automation."""
    
    rescue_code: str = Field(
        ...,
        description="Code rescue 6 chiffres",
        min_length=6,
        max_length=6
    )
    
    timeout: int = Field(
        default=120,
        ge=30,
        le=300,
        description="Timeout total automation (secondes)"
    )
    
    @validator("rescue_code")
    def validate_rescue_code(cls, v):
        """Valide le code rescue."""
        if not v.isdigit():
            raise ValueError("Le code rescue doit contenir uniquement des chiffres")
        if len(v) != 6:
            raise ValueError("Le code rescue doit faire exactement 6 chiffres")
        return v


class LogMeInRescuePlugin(WindowsPlugin):
    """
    Plugin LogMeIn Rescue - Version simple sans Selenium.
    
    Utilise webbrowser + pywinauto pour automation l√©g√®re.
    """
    
    name = "logmein_rescue"
    description = "LogMeIn Rescue automation (simple version)"
    version = "2.0.0"
    
    # URL LogMeIn
    LOGMEIN_URL = "https://secure.logmeinrescue.com/Customer/Code.aspx"
    
    def __init__(self):
        super().__init__()
        self._download_dir = Path.home() / "Downloads"
    
    def validate_params(self, params: dict) -> bool:
        """Valide les param√®tres."""
        try:
            LogMeInRescueParams(**params)
            return True
        except Exception as e:
            self.logger.error(f"Invalid params: {e}")
            return False
    
    async def execute(self, params: dict) -> PluginResult:
        """
        Ex√©cute l'automation LogMeIn simple.
        
        Steps:
        1. Ouvre navigateur avec URL + code en POST
        2. Attend t√©l√©chargement applet
        3. Lance applet avec droits admin
        
        Args:
            params: Param√®tres LogMeIn (dict ou LogMeInRescueParams)
        
        Returns:
            R√©sultat automation
        """
        # Convertir dict en objet Pydantic si n√©cessaire
        if isinstance(params, dict):
            params = LogMeInRescueParams(**params)
        
        start_time = time.time()
        
        try:
            self.logger.info(f"üöÄ Starting LogMeIn automation v2 for code: {params.rescue_code}")
            
            # Step 1: Ouvrir navigateur avec code
            url_with_code = f"{self.LOGMEIN_URL}?Code={params.rescue_code}"
            self.logger.info(f"Opening browser: {url_with_code}")
            webbrowser.open(url_with_code)
            
            # Step 2: Attendre t√©l√©chargement applet
            self.logger.info(f"Waiting for applet download in {self._download_dir}")
            applet_path = await self._wait_for_applet_download(timeout=params.timeout - 30)
            
            # Step 3: Lancer applet avec droits admin
            self.logger.info(f"Launching applet: {applet_path}")
            await self._launch_applet_as_admin(applet_path)
            
            duration_ms = (time.time() - start_time) * 1000
            
            return PluginResult(
                status="success",
                message=f"LogMeIn session started for code {params.rescue_code}",
                data={
                    "rescue_code": params.rescue_code,
                    "applet_path": str(applet_path),
                    "method": "webbrowser_simple"
                },
                duration_ms=duration_ms
            )
            
        except asyncio.TimeoutError:
            return PluginResult(
                status="timeout",
                message=f"Automation timeout after {params.timeout}s",
                error="Timeout exceeded"
            )
        except Exception as e:
            self.logger.error(f"‚ùå LogMeIn automation failed: {e}", exc_info=True)
            return PluginResult(
                status="error",
                message="LogMeIn automation failed",
                error=str(e)
            )
    
    async def _wait_for_applet_download(self, timeout: int = 90) -> Path:
        """
        Attend le t√©l√©chargement de l'applet LogMeIn.
        
        Cherche fichiers r√©cents dans Downloads :
        - *.exe (applet LogMeIn)
        - CustomerClient.exe
        - rescue*.exe
        
        Args:
            timeout: Timeout en secondes
        
        Returns:
            Path de l'applet t√©l√©charg√©
        
        Raises:
            TimeoutError: Si timeout d√©pass√©
        """
        start_time = time.time()
        
        # Patterns fichiers applet LogMeIn (tous les formats connus)
        patterns = [
            "Support-LogMeInRescue*.exe",  # Format standard Fiducial
            "CustomerClient*.exe",          # Format classique
            "rescue*.exe",                  # Format g√©n√©rique
            "logmein*.exe"                  # Format g√©n√©rique
        ]
        
        while time.time() - start_time < timeout:
            # Chercher fichiers r√©cents (< 2 minutes)
            recent_files = []
            for pattern in patterns:
                for file_path in self._download_dir.glob(pattern):
                    if file_path.is_file():
                        # V√©rifier si fichier r√©cent
                        age = time.time() - file_path.stat().st_mtime
                        if age < 120:  # < 2 minutes
                            recent_files.append(file_path)
            
            if recent_files:
                # Prendre le plus r√©cent
                applet = max(recent_files, key=lambda p: p.stat().st_mtime)
                self.logger.info(f"‚úì Applet found: {applet.name}")
                return applet
            
            await asyncio.sleep(2)
        
        raise asyncio.TimeoutError(f"Applet download timeout after {timeout}s")
    
    async def _launch_applet_as_admin(self, applet_path: Path):
        """
        Lance l'applet avec droits administrateur et automatise le clic "OK".
        
        Workflow:
        1. Lance applet avec √©l√©vation UAC (PowerShell Start-Process -Verb RunAs)
        2. Attend fen√™tre permission applet LogMeIn
        3. D√©tecte et clique bouton "OK" automatiquement
        
        Args:
            applet_path: Chemin vers l'applet
        """
        try:
            # Lancer avec √©l√©vation UAC
            cmd = ["powershell", "-Command", f"Start-Process '{applet_path}' -Verb RunAs"]
            
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                self.logger.info("‚úì Applet launched successfully")
            else:
                self.logger.warning(f"Applet launch returned code {process.returncode}")
                if stderr:
                    self.logger.warning(f"stderr: {stderr.decode('utf-8', errors='ignore')}")
            
            # Automatiser la validation "OK" avec Windows API SendKeys
            if WIN32_AVAILABLE:
                await self._auto_press_enter()
            else:
                self.logger.warning("win32com non disponible - validation manuelle requise")
            
        except Exception as e:
            self.logger.error(f"Failed to launch applet: {e}")
            raise
    
    async def _auto_press_enter(self):
        """
        Automatise la validation "OK" avec Tab + Enter via Windows API SendKeys.
        
        Utilise win32com.client.Dispatch("WScript.Shell").SendKeys()
        Fonctionne m√™me avec les fen√™tres lanc√©es en admin (contrairement √† pyautogui).
        
        Par d√©faut curseur sur ANNULER ‚Üí Tab ‚Üí OK ‚Üí Enter ‚Üí valid√© !
        """
        try:
            self.logger.info("Attente fen√™tre permission (5 secondes)...")
            
            # Attendre 5 secondes que la fen√™tre apparaisse et se mette en avant
            await asyncio.sleep(5)
            
            self.logger.info("Envoi Tab + Enter via Windows SendKeys API...")
            
            # Ex√©cuter SendKeys dans un thread s√©par√© (non-blocking)
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(None, self._sendkeys_tab_enter)
            
            self.logger.info("‚úì Tab + Enter envoy√©s via SendKeys - permission valid√©e")
            
        except Exception as e:
            self.logger.warning(f"Auto-validation √©chou√©e: {e} - Validation manuelle n√©cessaire")
    
    def _sendkeys_tab_enter(self):
        """
        Envoie Tab + Enter via Windows SendKeys API.
        
        Windows API SendKeys fonctionne avec les fen√™tres admin (contrairement √† pyautogui).
        Syntaxe SendKeys: {TAB} pour Tab, {ENTER} pour Enter, ~ pour Enter aussi.
        """
        try:
            self.logger.info("DEBUG: Cr√©ation WScript.Shell...")
            shell = win32com.client.Dispatch("WScript.Shell")
            
            self.logger.info("DEBUG: Envoi {TAB} via SendKeys...")
            shell.SendKeys("{TAB}")
            
            time.sleep(0.5)  # Pause 0.5s entre Tab et Enter
            
            self.logger.info("DEBUG: Envoi {ENTER} via SendKeys...")
            shell.SendKeys("{ENTER}")
            
            self.logger.info("DEBUG: SendKeys termin√© avec succ√®s")
            
        except Exception as e:
            self.logger.error(f"ERREUR SendKeys: {type(e).__name__}: {e}")
            import traceback
            self.logger.error(f"Traceback: {traceback.format_exc()}")
